/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net.Specification.IndicesApi;

// ReSharper disable once CheckNamespace
// ReSharper disable RedundantTypeArgumentsOfMethod
namespace OpenSearch.Client.Specification.IndicesApi
{
    /// <summary>
    /// Indices APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchClient.Indices"/> property
    /// on <see cref="IOpenSearchClient"/>.
    /// </para>
    /// </summary>
    public partial class IndicesNamespace : NamespacedClientProxy
    {
        internal IndicesNamespace(OpenSearchClient client)
            : base(client) { }

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.add_block</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest">https://opensearch.org/docs/latest</a>
        /// </summary>
        public AddIndexBlockResponse AddBlock(
            Indices index,
            IndexBlock block,
            Func<AddIndexBlockDescriptor, IAddIndexBlockRequest> selector = null
        ) =>
            AddBlock(
                selector.InvokeOrDefault(new AddIndexBlockDescriptor(index: index, block: block))
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.add_block</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest">https://opensearch.org/docs/latest</a>
        /// </summary>
        public Task<AddIndexBlockResponse> AddBlockAsync(
            Indices index,
            IndexBlock block,
            Func<AddIndexBlockDescriptor, IAddIndexBlockRequest> selector = null,
            CancellationToken ct = default
        ) =>
            AddBlockAsync(
                selector.InvokeOrDefault(new AddIndexBlockDescriptor(index: index, block: block)),
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.add_block</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest">https://opensearch.org/docs/latest</a>
        /// </summary>
        public AddIndexBlockResponse AddBlock(IAddIndexBlockRequest request) =>
            DoRequest<IAddIndexBlockRequest, AddIndexBlockResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.add_block</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest">https://opensearch.org/docs/latest</a>
        /// </summary>
        public Task<AddIndexBlockResponse> AddBlockAsync(
            IAddIndexBlockRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IAddIndexBlockRequest, AddIndexBlockResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>POST</c> request to the <c>indices.analyze</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/">https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</a>
        /// </summary>
        public AnalyzeResponse Analyze(Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null) =>
            Analyze(selector.InvokeOrDefault(new AnalyzeDescriptor()));

        /// <summary>
        /// <c>POST</c> request to the <c>indices.analyze</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/">https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</a>
        /// </summary>
        public Task<AnalyzeResponse> AnalyzeAsync(
            Func<AnalyzeDescriptor, IAnalyzeRequest> selector = null,
            CancellationToken ct = default
        ) => AnalyzeAsync(selector.InvokeOrDefault(new AnalyzeDescriptor()), ct);

        /// <summary>
        /// <c>POST</c> request to the <c>indices.analyze</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/">https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</a>
        /// </summary>
        public AnalyzeResponse Analyze(IAnalyzeRequest request) =>
            DoRequest<IAnalyzeRequest, AnalyzeResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>POST</c> request to the <c>indices.analyze</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/">https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</a>
        /// </summary>
        public Task<AnalyzeResponse> AnalyzeAsync(
            IAnalyzeRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IAnalyzeRequest, AnalyzeResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>POST</c> request to the <c>indices.clear_cache</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/">https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</a>
        /// </summary>
        public ClearCacheResponse ClearCache(
            Indices index = null,
            Func<ClearCacheDescriptor, IClearCacheRequest> selector = null
        ) => ClearCache(selector.InvokeOrDefault(new ClearCacheDescriptor().Index(index: index)));

        /// <summary>
        /// <c>POST</c> request to the <c>indices.clear_cache</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/">https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</a>
        /// </summary>
        public Task<ClearCacheResponse> ClearCacheAsync(
            Indices index = null,
            Func<ClearCacheDescriptor, IClearCacheRequest> selector = null,
            CancellationToken ct = default
        ) =>
            ClearCacheAsync(
                selector.InvokeOrDefault(new ClearCacheDescriptor().Index(index: index)),
                ct
            );

        /// <summary>
        /// <c>POST</c> request to the <c>indices.clear_cache</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/">https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</a>
        /// </summary>
        public ClearCacheResponse ClearCache(IClearCacheRequest request) =>
            DoRequest<IClearCacheRequest, ClearCacheResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>POST</c> request to the <c>indices.clear_cache</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/">https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</a>
        /// </summary>
        public Task<ClearCacheResponse> ClearCacheAsync(
            IClearCacheRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IClearCacheRequest, ClearCacheResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.clone</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clone/">https://opensearch.org/docs/latest/api-reference/index-apis/clone/</a>
        /// </summary>
        public CloneIndexResponse Clone(
            IndexName index,
            IndexName target,
            Func<CloneIndexDescriptor, ICloneIndexRequest> selector = null
        ) =>
            Clone(selector.InvokeOrDefault(new CloneIndexDescriptor(index: index, target: target)));

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.clone</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clone/">https://opensearch.org/docs/latest/api-reference/index-apis/clone/</a>
        /// </summary>
        public Task<CloneIndexResponse> CloneAsync(
            IndexName index,
            IndexName target,
            Func<CloneIndexDescriptor, ICloneIndexRequest> selector = null,
            CancellationToken ct = default
        ) =>
            CloneAsync(
                selector.InvokeOrDefault(new CloneIndexDescriptor(index: index, target: target)),
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.clone</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clone/">https://opensearch.org/docs/latest/api-reference/index-apis/clone/</a>
        /// </summary>
        public CloneIndexResponse Clone(ICloneIndexRequest request) =>
            DoRequest<ICloneIndexRequest, CloneIndexResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.clone</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/clone/">https://opensearch.org/docs/latest/api-reference/index-apis/clone/</a>
        /// </summary>
        public Task<CloneIndexResponse> CloneAsync(
            ICloneIndexRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<ICloneIndexRequest, CloneIndexResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>POST</c> request to the <c>indices.close</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/close-index/">https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</a>
        /// </summary>
        public CloseIndexResponse Close(
            Indices index,
            Func<CloseIndexDescriptor, ICloseIndexRequest> selector = null
        ) => Close(selector.InvokeOrDefault(new CloseIndexDescriptor(index: index)));

        /// <summary>
        /// <c>POST</c> request to the <c>indices.close</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/close-index/">https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</a>
        /// </summary>
        public Task<CloseIndexResponse> CloseAsync(
            Indices index,
            Func<CloseIndexDescriptor, ICloseIndexRequest> selector = null,
            CancellationToken ct = default
        ) => CloseAsync(selector.InvokeOrDefault(new CloseIndexDescriptor(index: index)), ct);

        /// <summary>
        /// <c>POST</c> request to the <c>indices.close</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/close-index/">https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</a>
        /// </summary>
        public CloseIndexResponse Close(ICloseIndexRequest request) =>
            DoRequest<ICloseIndexRequest, CloseIndexResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>POST</c> request to the <c>indices.close</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/close-index/">https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</a>
        /// </summary>
        public Task<CloseIndexResponse> CloseAsync(
            ICloseIndexRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<ICloseIndexRequest, CloseIndexResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.create</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/create-index/">https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</a>
        /// </summary>
        public CreateIndexResponse Create(
            IndexName index,
            Func<CreateIndexDescriptor, ICreateIndexRequest> selector = null
        ) => Create(selector.InvokeOrDefault(new CreateIndexDescriptor(index: index)));

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.create</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/create-index/">https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</a>
        /// </summary>
        public Task<CreateIndexResponse> CreateAsync(
            IndexName index,
            Func<CreateIndexDescriptor, ICreateIndexRequest> selector = null,
            CancellationToken ct = default
        ) => CreateAsync(selector.InvokeOrDefault(new CreateIndexDescriptor(index: index)), ct);

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.create</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/create-index/">https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</a>
        /// </summary>
        public CreateIndexResponse Create(ICreateIndexRequest request) =>
            DoRequest<ICreateIndexRequest, CreateIndexResponse>(request, request.RequestParameters);

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.create</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/api-reference/index-apis/create-index/">https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</a>
        /// </summary>
        public Task<CreateIndexResponse> CreateAsync(
            ICreateIndexRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<ICreateIndexRequest, CreateIndexResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>DELETE</c> request to the <c>indices.delete_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template">https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</a>
        /// </summary>
        public DeleteComposableIndexTemplateResponse DeleteComposableTemplate(
            Name name,
            Func<
                DeleteComposableIndexTemplateDescriptor,
                IDeleteComposableIndexTemplateRequest
            > selector = null
        ) =>
            DeleteComposableTemplate(
                selector.InvokeOrDefault(new DeleteComposableIndexTemplateDescriptor(name: name))
            );

        /// <summary>
        /// <c>DELETE</c> request to the <c>indices.delete_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template">https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</a>
        /// </summary>
        public Task<DeleteComposableIndexTemplateResponse> DeleteComposableTemplateAsync(
            Name name,
            Func<
                DeleteComposableIndexTemplateDescriptor,
                IDeleteComposableIndexTemplateRequest
            > selector = null,
            CancellationToken ct = default
        ) =>
            DeleteComposableTemplateAsync(
                selector.InvokeOrDefault(new DeleteComposableIndexTemplateDescriptor(name: name)),
                ct
            );

        /// <summary>
        /// <c>DELETE</c> request to the <c>indices.delete_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template">https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</a>
        /// </summary>
        public DeleteComposableIndexTemplateResponse DeleteComposableTemplate(
            IDeleteComposableIndexTemplateRequest request
        ) =>
            DoRequest<IDeleteComposableIndexTemplateRequest, DeleteComposableIndexTemplateResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>DELETE</c> request to the <c>indices.delete_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template">https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</a>
        /// </summary>
        public Task<DeleteComposableIndexTemplateResponse> DeleteComposableTemplateAsync(
            IDeleteComposableIndexTemplateRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<
                IDeleteComposableIndexTemplateRequest,
                DeleteComposableIndexTemplateResponse
            >(request, request.RequestParameters, ct);

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public ExistsResponse ComposableTemplateExists(
            Name name,
            Func<
                ComposableIndexTemplateExistsDescriptor,
                IComposableIndexTemplateExistsRequest
            > selector = null
        ) =>
            ComposableTemplateExists(
                selector.InvokeOrDefault(new ComposableIndexTemplateExistsDescriptor(name: name))
            );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<ExistsResponse> ComposableTemplateExistsAsync(
            Name name,
            Func<
                ComposableIndexTemplateExistsDescriptor,
                IComposableIndexTemplateExistsRequest
            > selector = null,
            CancellationToken ct = default
        ) =>
            ComposableTemplateExistsAsync(
                selector.InvokeOrDefault(new ComposableIndexTemplateExistsDescriptor(name: name)),
                ct
            );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public ExistsResponse ComposableTemplateExists(
            IComposableIndexTemplateExistsRequest request
        ) =>
            DoRequest<IComposableIndexTemplateExistsRequest, ExistsResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>HEAD</c> request to the <c>indices.exists_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<ExistsResponse> ComposableTemplateExistsAsync(
            IComposableIndexTemplateExistsRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IComposableIndexTemplateExistsRequest, ExistsResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>GET</c> request to the <c>indices.get_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public GetComposableIndexTemplateResponse GetComposableTemplate(
            Name name = null,
            Func<
                GetComposableIndexTemplateDescriptor,
                IGetComposableIndexTemplateRequest
            > selector = null
        ) =>
            GetComposableTemplate(
                selector.InvokeOrDefault(
                    new GetComposableIndexTemplateDescriptor().Name(name: name)
                )
            );

        /// <summary>
        /// <c>GET</c> request to the <c>indices.get_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<GetComposableIndexTemplateResponse> GetComposableTemplateAsync(
            Name name = null,
            Func<
                GetComposableIndexTemplateDescriptor,
                IGetComposableIndexTemplateRequest
            > selector = null,
            CancellationToken ct = default
        ) =>
            GetComposableTemplateAsync(
                selector.InvokeOrDefault(
                    new GetComposableIndexTemplateDescriptor().Name(name: name)
                ),
                ct
            );

        /// <summary>
        /// <c>GET</c> request to the <c>indices.get_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public GetComposableIndexTemplateResponse GetComposableTemplate(
            IGetComposableIndexTemplateRequest request
        ) =>
            DoRequest<IGetComposableIndexTemplateRequest, GetComposableIndexTemplateResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>GET</c> request to the <c>indices.get_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<GetComposableIndexTemplateResponse> GetComposableTemplateAsync(
            IGetComposableIndexTemplateRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IGetComposableIndexTemplateRequest, GetComposableIndexTemplateResponse>(
                request,
                request.RequestParameters,
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public PutComposableIndexTemplateResponse PutComposableTemplate(
            Name name,
            Func<PutComposableIndexTemplateDescriptor, IPutComposableIndexTemplateRequest> selector
        ) =>
            PutComposableTemplate(
                selector.InvokeOrDefault(new PutComposableIndexTemplateDescriptor(name: name))
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<PutComposableIndexTemplateResponse> PutComposableTemplateAsync(
            Name name,
            Func<PutComposableIndexTemplateDescriptor, IPutComposableIndexTemplateRequest> selector,
            CancellationToken ct = default
        ) =>
            PutComposableTemplateAsync(
                selector.InvokeOrDefault(new PutComposableIndexTemplateDescriptor(name: name)),
                ct
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public PutComposableIndexTemplateResponse PutComposableTemplate(
            IPutComposableIndexTemplateRequest request
        ) =>
            DoRequest<IPutComposableIndexTemplateRequest, PutComposableIndexTemplateResponse>(
                request,
                request.RequestParameters
            );

        /// <summary>
        /// <c>PUT</c> request to the <c>indices.put_index_template</c> API, read more about this API online:
        /// <para></para>
        /// <a href="https://opensearch.org/docs/latest/im-plugin/index-templates/">https://opensearch.org/docs/latest/im-plugin/index-templates/</a>
        /// </summary>
        public Task<PutComposableIndexTemplateResponse> PutComposableTemplateAsync(
            IPutComposableIndexTemplateRequest request,
            CancellationToken ct = default
        ) =>
            DoRequestAsync<IPutComposableIndexTemplateRequest, PutComposableIndexTemplateResponse>(
                request,
                request.RequestParameters,
                ct
            );
    }
}
