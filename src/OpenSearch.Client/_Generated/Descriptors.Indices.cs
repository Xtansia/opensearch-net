/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using OpenSearch.Net;
using OpenSearch.Net.Specification.IndicesApi;
using OpenSearch.Net.Utf8Json;

// ReSharper disable RedundantBaseConstructorCall
// ReSharper disable UnusedTypeParameter
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
namespace OpenSearch.Client
{
    /// <summary>Descriptor for AddBlock <para>https://opensearch.org/docs/latest</para></summary>
    public partial class AddIndexBlockDescriptor
        : RequestDescriptorBase<
            AddIndexBlockDescriptor,
            AddIndexBlockRequestParameters,
            IAddIndexBlockRequest
        >,
            IAddIndexBlockRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesAddBlock;

        /// <summary>/{index}/_block/{block}</summary>
        /// <param name="index">this parameter is required</param>
        /// <param name="block">this parameter is required</param>
        public AddIndexBlockDescriptor(Indices index, IndexBlock block)
            : base(r => r.Required("index", index).Required("block", block)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected AddIndexBlockDescriptor()
            : base() { }

        // values part of the url path
        IndexBlock IAddIndexBlockRequest.Block => Self.RouteValues.Get<IndexBlock>("block");
        Indices IAddIndexBlockRequest.Index => Self.RouteValues.Get<Indices>("index");

        /// <summary>A comma separated list of indices to add a block to.</summary>
        public AddIndexBlockDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Required("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public AddIndexBlockDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Required("index", (Indices)v));

        /// <summary>A shortcut into calling Index(Indices.All)</summary>
        public AddIndexBlockDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        /// <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified).</summary>
        public AddIndexBlockDescriptor AllowNoIndices(bool? allownoindices = true) =>
            Qs("allow_no_indices", allownoindices);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public AddIndexBlockDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        public AddIndexBlockDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed).</summary>
        public AddIndexBlockDescriptor IgnoreUnavailable(bool? ignoreunavailable = true) =>
            Qs("ignore_unavailable", ignoreunavailable);

        /// <summary>Specify timeout for connection to master.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public AddIndexBlockDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Explicit operation timeout.</summary>
        public AddIndexBlockDescriptor Timeout(Time timeout) => Qs("timeout", timeout);
    }

    /// <summary>Descriptor for Analyze <para>https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</para></summary>
    public partial class AnalyzeDescriptor
        : RequestDescriptorBase<AnalyzeDescriptor, AnalyzeRequestParameters, IAnalyzeRequest>,
            IAnalyzeRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesAnalyze;

        /// <summary>/_analyze</summary>
        public AnalyzeDescriptor()
            : base() { }

        /// <summary>/{index}/_analyze</summary>
        /// <param name="index">Optional, accepts null</param>
        public AnalyzeDescriptor(IndexName index)
            : base(r => r.Optional("index", index)) { }

        // values part of the url path
        IndexName IAnalyzeRequest.Index => Self.RouteValues.Get<IndexName>("index");

        /// <summary>Index used to derive the analyzer. If specified, the `analyzer` or field parameter overrides this value. If no index is specified or the index does not have a default analyzer, the analyze API uses the standard analyzer.</summary>
        public AnalyzeDescriptor Index(IndexName index) =>
            Assign(index, (a, v) => a.RouteValues.Optional("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public AnalyzeDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Optional("index", (IndexName)v));
        // Request parameters
    }

    /// <summary>Descriptor for ClearCache <para>https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</para></summary>
    public partial class ClearCacheDescriptor
        : RequestDescriptorBase<
            ClearCacheDescriptor,
            ClearCacheRequestParameters,
            IClearCacheRequest
        >,
            IClearCacheRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClearCache;

        /// <summary>/_cache/clear</summary>
        public ClearCacheDescriptor()
            : base() { }

        /// <summary>/{index}/_cache/clear</summary>
        /// <param name="index">Optional, accepts null</param>
        public ClearCacheDescriptor(Indices index)
            : base(r => r.Optional("index", index)) { }

        // values part of the url path
        Indices IClearCacheRequest.Index => Self.RouteValues.Get<Indices>("index");

        /// <summary>Comma-separated list of data streams, indices, and aliases used to limit the request. Supports wildcards (`*`). To target all data streams and indices, omit this parameter or use `*` or `_all`.</summary>
        public ClearCacheDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Optional("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public ClearCacheDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Optional("index", (Indices)v));

        /// <summary>A shortcut into calling Index(Indices.All)</summary>
        public ClearCacheDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        /// <summary>If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices. This behavior applies even if the request targets other open indices.</summary>
        public ClearCacheDescriptor AllowNoIndices(bool? allownoindices = true) =>
            Qs("allow_no_indices", allownoindices);

        /// <summary>Type of index that wildcard patterns can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as `open,hidden`. Valid values are: `all`, `open`, `closed`, `hidden`, `none`.</summary>
        public ClearCacheDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>If `true`, clears the fields cache. Use the `fields` parameter to clear the cache of specific fields only.</summary>
        public ClearCacheDescriptor Fielddata(bool? fielddata = true) => Qs("fielddata", fielddata);

        /// <summary>Comma-separated list of field names used to limit the `fielddata` parameter.</summary>
        public ClearCacheDescriptor Fields(Fields fields) => Qs("fields", fields);

        /// <summary>Comma-separated list of field names used to limit the `fielddata` parameter.</summary>
        public ClearCacheDescriptor Fields<T>(params Expression<Func<T, object>>[] fields)
            where T : class => Qs("fields", fields?.Select(e => (Field)e));

        /// <summary>If `false`, the request returns an error if it targets a missing or closed index.</summary>
        public ClearCacheDescriptor IgnoreUnavailable(bool? ignoreunavailable = true) =>
            Qs("ignore_unavailable", ignoreunavailable);

        /// <summary>If `true`, clears the query cache.</summary>
        public ClearCacheDescriptor Query(bool? query = true) => Qs("query", query);

        /// <summary>If `true`, clears the request cache.</summary>
        public ClearCacheDescriptor Request(bool? request = true) => Qs("request", request);
    }

    /// <summary>Descriptor for Clone <para>https://opensearch.org/docs/latest/api-reference/index-apis/clone/</para></summary>
    public partial class CloneIndexDescriptor
        : RequestDescriptorBase<
            CloneIndexDescriptor,
            CloneIndexRequestParameters,
            ICloneIndexRequest
        >,
            ICloneIndexRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClone;

        /// <summary>/{index}/_clone/{target}</summary>
        /// <param name="index">this parameter is required</param>
        /// <param name="target">this parameter is required</param>
        public CloneIndexDescriptor(IndexName index, IndexName target)
            : base(r => r.Required("index", index).Required("target", target)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected CloneIndexDescriptor()
            : base() { }

        // values part of the url path
        IndexName ICloneIndexRequest.Index => Self.RouteValues.Get<IndexName>("index");
        IndexName ICloneIndexRequest.Target => Self.RouteValues.Get<IndexName>("target");

        /// <summary>Name of the source index to clone.</summary>
        public CloneIndexDescriptor Index(IndexName index) =>
            Assign(index, (a, v) => a.RouteValues.Required("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CloneIndexDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Required("index", (IndexName)v));

        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CloneIndexDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CloneIndexDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Explicit task execution timeout, only useful when wait_for_completion is false, defaults to 1h.</summary>
        public CloneIndexDescriptor TaskExecutionTimeout(Time taskexecutiontimeout) =>
            Qs("task_execution_timeout", taskexecutiontimeout);

        /// <summary>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        public CloneIndexDescriptor Timeout(Time timeout) => Qs("timeout", timeout);

        /// <summary>The number of shard copies that must be active before proceeding with the operation. Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).</summary>
        public CloneIndexDescriptor WaitForActiveShards(string waitforactiveshards) =>
            Qs("wait_for_active_shards", waitforactiveshards);

        /// <summary>Should this request wait until the operation has completed before returning.</summary>
        public CloneIndexDescriptor WaitForCompletion(bool? waitforcompletion = true) =>
            Qs("wait_for_completion", waitforcompletion);
    }

    /// <summary>Descriptor for Close <para>https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</para></summary>
    public partial class CloseIndexDescriptor
        : RequestDescriptorBase<
            CloseIndexDescriptor,
            CloseIndexRequestParameters,
            ICloseIndexRequest
        >,
            ICloseIndexRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesClose;

        /// <summary>/{index}/_close</summary>
        /// <param name="index">this parameter is required</param>
        public CloseIndexDescriptor(Indices index)
            : base(r => r.Required("index", index)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected CloseIndexDescriptor()
            : base() { }

        // values part of the url path
        Indices ICloseIndexRequest.Index => Self.RouteValues.Get<Indices>("index");

        /// <summary>Comma-separated list or wildcard expression of index names used to limit the request.</summary>
        public CloseIndexDescriptor Index(Indices index) =>
            Assign(index, (a, v) => a.RouteValues.Required("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CloseIndexDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Required("index", (Indices)v));

        /// <summary>A shortcut into calling Index(Indices.All)</summary>
        public CloseIndexDescriptor AllIndices() => Index(Indices.All);

        // Request parameters
        /// <summary>If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices. This behavior applies even if the request targets other open indices.</summary>
        public CloseIndexDescriptor AllowNoIndices(bool? allownoindices = true) =>
            Qs("allow_no_indices", allownoindices);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CloseIndexDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Type of index that wildcard patterns can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as `open,hidden`. Valid values are: `all`, `open`, `closed`, `hidden`, `none`.</summary>
        public CloseIndexDescriptor ExpandWildcards(ExpandWildcards? expandwildcards) =>
            Qs("expand_wildcards", expandwildcards);

        /// <summary>If `false`, the request returns an error if it targets a missing or closed index.</summary>
        public CloseIndexDescriptor IgnoreUnavailable(bool? ignoreunavailable = true) =>
            Qs("ignore_unavailable", ignoreunavailable);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CloseIndexDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        public CloseIndexDescriptor Timeout(Time timeout) => Qs("timeout", timeout);

        /// <summary>The number of shard copies that must be active before proceeding with the operation. Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).</summary>
        public CloseIndexDescriptor WaitForActiveShards(string waitforactiveshards) =>
            Qs("wait_for_active_shards", waitforactiveshards);
    }

    /// <summary>Descriptor for Create <para>https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</para></summary>
    public partial class CreateIndexDescriptor
        : RequestDescriptorBase<
            CreateIndexDescriptor,
            CreateIndexRequestParameters,
            ICreateIndexRequest
        >,
            ICreateIndexRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesCreate;

        /// <summary>/{index}</summary>
        /// <param name="index">this parameter is required</param>
        public CreateIndexDescriptor(IndexName index)
            : base(r => r.Required("index", index)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected CreateIndexDescriptor()
            : base() { }

        // values part of the url path
        IndexName ICreateIndexRequest.Index => Self.RouteValues.Get<IndexName>("index");

        /// <summary>Name of the index you wish to create.</summary>
        public CreateIndexDescriptor Index(IndexName index) =>
            Assign(index, (a, v) => a.RouteValues.Required("index", v));

        /// <summary>a shortcut into calling Index(typeof(TOther))</summary>
        public CreateIndexDescriptor Index<TOther>()
            where TOther : class =>
            Assign(typeof(TOther), (a, v) => a.RouteValues.Required("index", (IndexName)v));

        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public CreateIndexDescriptor ClusterManagerTimeout(Time clustermanagertimeout) =>
            Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public CreateIndexDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        public CreateIndexDescriptor Timeout(Time timeout) => Qs("timeout", timeout);

        /// <summary>The number of shard copies that must be active before proceeding with the operation. Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).</summary>
        public CreateIndexDescriptor WaitForActiveShards(string waitforactiveshards) =>
            Qs("wait_for_active_shards", waitforactiveshards);
    }

    /// <summary>Descriptor for DeleteComposableTemplate <para>https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</para></summary>
    public partial class DeleteComposableIndexTemplateDescriptor
        : RequestDescriptorBase<
            DeleteComposableIndexTemplateDescriptor,
            DeleteComposableIndexTemplateRequestParameters,
            IDeleteComposableIndexTemplateRequest
        >,
            IDeleteComposableIndexTemplateRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesDeleteComposableTemplate;

        /// <summary>/_index_template/{name}</summary>
        /// <param name="name">this parameter is required</param>
        public DeleteComposableIndexTemplateDescriptor(Name name)
            : base(r => r.Required("name", name)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected DeleteComposableIndexTemplateDescriptor()
            : base() { }

        // values part of the url path
        Name IDeleteComposableIndexTemplateRequest.Name => Self.RouteValues.Get<Name>("name");

        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public DeleteComposableIndexTemplateDescriptor ClusterManagerTimeout(
            Time clustermanagertimeout
        ) => Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public DeleteComposableIndexTemplateDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);

        /// <summary>Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        public DeleteComposableIndexTemplateDescriptor Timeout(Time timeout) =>
            Qs("timeout", timeout);
    }

    /// <summary>Descriptor for ComposableTemplateExists <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
    public partial class ComposableIndexTemplateExistsDescriptor
        : RequestDescriptorBase<
            ComposableIndexTemplateExistsDescriptor,
            ComposableIndexTemplateExistsRequestParameters,
            IComposableIndexTemplateExistsRequest
        >,
            IComposableIndexTemplateExistsRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesComposableTemplateExists;

        /// <summary>/_index_template/{name}</summary>
        /// <param name="name">this parameter is required</param>
        public ComposableIndexTemplateExistsDescriptor(Name name)
            : base(r => r.Required("name", name)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected ComposableIndexTemplateExistsDescriptor()
            : base() { }

        // values part of the url path
        Name IComposableIndexTemplateExistsRequest.Name => Self.RouteValues.Get<Name>("name");

        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public ComposableIndexTemplateExistsDescriptor ClusterManagerTimeout(
            Time clustermanagertimeout
        ) => Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>Return settings in flat format.</summary>
        public ComposableIndexTemplateExistsDescriptor FlatSettings(bool? flatsettings = true) =>
            Qs("flat_settings", flatsettings);

        /// <summary>Return local information, do not retrieve the state from cluster-manager node.</summary>
        public ComposableIndexTemplateExistsDescriptor Local(bool? local = true) =>
            Qs("local", local);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public ComposableIndexTemplateExistsDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);
    }

    /// <summary>Descriptor for GetComposableTemplate <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
    public partial class GetComposableIndexTemplateDescriptor
        : RequestDescriptorBase<
            GetComposableIndexTemplateDescriptor,
            GetComposableIndexTemplateRequestParameters,
            IGetComposableIndexTemplateRequest
        >,
            IGetComposableIndexTemplateRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesGetComposableTemplate;

        /// <summary>/_index_template</summary>
        public GetComposableIndexTemplateDescriptor()
            : base() { }

        /// <summary>/_index_template/{name}</summary>
        /// <param name="name">Optional, accepts null</param>
        public GetComposableIndexTemplateDescriptor(Name name)
            : base(r => r.Optional("name", name)) { }

        // values part of the url path
        Name IGetComposableIndexTemplateRequest.Name => Self.RouteValues.Get<Name>("name");

        /// <summary>Name of the index template to retrieve. Wildcard (*) expressions are supported.</summary>
        public GetComposableIndexTemplateDescriptor Name(Name name) =>
            Assign(name, (a, v) => a.RouteValues.Optional("name", v));

        // Request parameters
        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public GetComposableIndexTemplateDescriptor ClusterManagerTimeout(
            Time clustermanagertimeout
        ) => Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>If true, returns settings in flat format.</summary>
        public GetComposableIndexTemplateDescriptor FlatSettings(bool? flatsettings = true) =>
            Qs("flat_settings", flatsettings);

        /// <summary>If true, the request retrieves information from the local node only. Defaults to false, which means information is retrieved from the master node.</summary>
        public GetComposableIndexTemplateDescriptor Local(bool? local = true) => Qs("local", local);

        /// <summary>Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public GetComposableIndexTemplateDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);
    }

    /// <summary>Descriptor for PutComposableTemplate <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
    public partial class PutComposableIndexTemplateDescriptor
        : RequestDescriptorBase<
            PutComposableIndexTemplateDescriptor,
            PutComposableIndexTemplateRequestParameters,
            IPutComposableIndexTemplateRequest
        >,
            IPutComposableIndexTemplateRequest
    {
        internal override ApiUrls ApiUrls => ApiUrlsLookups.IndicesPutComposableTemplate;

        /// <summary>/_index_template/{name}</summary>
        /// <param name="name">this parameter is required</param>
        public PutComposableIndexTemplateDescriptor(Name name)
            : base(r => r.Required("name", name)) { }

        /// <summary>Used for serialization purposes, making sure we have a parameterless constructor</summary>
        [SerializationConstructor]
        protected PutComposableIndexTemplateDescriptor()
            : base() { }

        // values part of the url path
        Name IPutComposableIndexTemplateRequest.Name => Self.RouteValues.Get<Name>("name");

        // Request parameters
        /// <summary>User defined reason for creating/updating the index template.</summary>
        public PutComposableIndexTemplateDescriptor Cause(string cause) => Qs("cause", cause);

        /// <summary>Operation timeout for connection to cluster-manager node.</summary>
        /// <remarks>Supported by OpenSearch servers of version 2.0.0 or greater.</remarks>
        public PutComposableIndexTemplateDescriptor ClusterManagerTimeout(
            Time clustermanagertimeout
        ) => Qs("cluster_manager_timeout", clustermanagertimeout);

        /// <summary>If `true`, this request cannot replace or update existing index templates.</summary>
        public PutComposableIndexTemplateDescriptor Create(bool? create = true) =>
            Qs("create", create);

        /// <summary>Operation timeout for connection to master node.</summary>
        [Obsolete(
            "Deprecated as of: 2.0.0, reason: To promote inclusive language, use 'cluster_manager_timeout' instead."
        )]
        public PutComposableIndexTemplateDescriptor MasterTimeout(Time mastertimeout) =>
            Qs("master_timeout", mastertimeout);
    }
}
