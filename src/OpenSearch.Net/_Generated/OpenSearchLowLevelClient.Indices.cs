/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using OpenSearch.Net;
using static OpenSearch.Net.HttpMethod;

// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable once CheckNamespace
// ReSharper disable InterpolatedStringExpressionIsNotIFormattable
// ReSharper disable RedundantExtendsListEntry
namespace OpenSearch.Net.Specification.IndicesApi
{
    /// <summary>
    /// Indices APIs.
    /// <para>Not intended to be instantiated directly. Use the <see cref="IOpenSearchLowLevelClient.Indices"/> property
    /// on <see cref="IOpenSearchLowLevelClient"/>.
    /// </para>
    /// </summary>
    public partial class LowLevelIndicesNamespace : NamespacedClientProxy
    {
        internal LowLevelIndicesNamespace(OpenSearchLowLevelClient client)
            : base(client) { }

        /// <summary>PUT on /{index}/_block/{block} <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">A comma separated list of indices to add a block to.</param>
        /// <param name="block">The block to add (one of read, write, read_only or metadata).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse AddBlock<TResponse>(
            string index,
            IndicesAddBlockIndicesBlockOptions? block,
            AddIndexBlockRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}/_block/{block:block}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_block/{block} <para>https://opensearch.org/docs/latest</para></summary>
        /// <param name="index">A comma separated list of indices to add a block to.</param>
        /// <param name="block">The block to add (one of read, write, read_only or metadata).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.add_block", "index, block")]
        public Task<TResponse> AddBlockAsync<TResponse>(
            string index,
            IndicesAddBlockIndicesBlockOptions? block,
            AddIndexBlockRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}/_block/{block:block}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_analyze <para>https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</para></summary>
        /// <param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse AnalyzeForAll<TResponse>(
            PostData body,
            AnalyzeRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_analyze", body, RequestParams(requestParameters));

        /// <summary>POST on /_analyze <para>https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</para></summary>
        /// <param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.analyze", "body")]
        public Task<TResponse> AnalyzeForAllAsync<TResponse>(
            PostData body,
            AnalyzeRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_analyze",
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_analyze <para>https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</para></summary>
        /// <param name="index">Index used to derive the analyzer. If specified, the `analyzer` or field parameter overrides this value. If no index is specified or the index does not have a default analyzer, the analyze API uses the standard analyzer.</param>
        /// <param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Analyze<TResponse>(
            string index,
            PostData body,
            AnalyzeRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_analyze"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_analyze <para>https://opensearch.org/docs/latest/api-reference/analyze-apis/perform-text-analysis/</para></summary>
        /// <param name="index">Index used to derive the analyzer. If specified, the `analyzer` or field parameter overrides this value. If no index is specified or the index does not have a default analyzer, the analyze API uses the standard analyzer.</param>
        /// <param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.analyze", "index, body")]
        public Task<TResponse> AnalyzeAsync<TResponse>(
            string index,
            PostData body,
            AnalyzeRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_analyze"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /_cache/clear <para>https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ClearCacheForAll<TResponse>(
            ClearCacheRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(POST, "_cache/clear", null, RequestParams(requestParameters));

        /// <summary>POST on /_cache/clear <para>https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.clear_cache", "")]
        public Task<TResponse> ClearCacheForAllAsync<TResponse>(
            ClearCacheRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                "_cache/clear",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_cache/clear <para>https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</para></summary>
        /// <param name="index">Comma-separated list of data streams, indices, and aliases used to limit the request. Supports wildcards (`*`). To target all data streams and indices, omit this parameter or use `*` or `_all`.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ClearCache<TResponse>(
            string index,
            ClearCacheRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_cache/clear"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_cache/clear <para>https://opensearch.org/docs/latest/api-reference/index-apis/clear-index-cache/</para></summary>
        /// <param name="index">Comma-separated list of data streams, indices, and aliases used to limit the request. Supports wildcards (`*`). To target all data streams and indices, omit this parameter or use `*` or `_all`.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.clear_cache", "index")]
        public Task<TResponse> ClearCacheAsync<TResponse>(
            string index,
            ClearCacheRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_cache/clear"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_clone/{target} <para>https://opensearch.org/docs/latest/api-reference/index-apis/clone/</para></summary>
        /// <param name="index">Name of the source index to clone.</param>
        /// <param name="target">Name of the target index to create.</param>
        /// <param name="body">The configuration for the target index (`settings` and `aliases`).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Clone<TResponse>(
            string index,
            string target,
            PostData body,
            CloneIndexRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}/_clone/{target:target}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index}/_clone/{target} <para>https://opensearch.org/docs/latest/api-reference/index-apis/clone/</para></summary>
        /// <param name="index">Name of the source index to clone.</param>
        /// <param name="target">Name of the target index to create.</param>
        /// <param name="body">The configuration for the target index (`settings` and `aliases`).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.clone", "index, target, body")]
        public Task<TResponse> CloneAsync<TResponse>(
            string index,
            string target,
            PostData body,
            CloneIndexRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}/_clone/{target:target}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_close <para>https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</para></summary>
        /// <param name="index">Comma-separated list or wildcard expression of index names used to limit the request.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Close<TResponse>(
            string index,
            CloseIndexRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                POST,
                Url($"{index:index}/_close"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>POST on /{index}/_close <para>https://opensearch.org/docs/latest/api-reference/index-apis/close-index/</para></summary>
        /// <param name="index">Comma-separated list or wildcard expression of index names used to limit the request.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.close", "index")]
        public Task<TResponse> CloseAsync<TResponse>(
            string index,
            CloseIndexRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                POST,
                Url($"{index:index}/_close"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index} <para>https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</para></summary>
        /// <param name="index">Name of the index you wish to create.</param>
        /// <param name="body">The configuration for the index (`settings` and `mappings`).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse Create<TResponse>(
            string index,
            PostData body,
            CreateIndexRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"{index:index}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /{index} <para>https://opensearch.org/docs/latest/api-reference/index-apis/create-index/</para></summary>
        /// <param name="index">Name of the index you wish to create.</param>
        /// <param name="body">The configuration for the index (`settings` and `mappings`).</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.create", "index, body")]
        public Task<TResponse> CreateAsync<TResponse>(
            string index,
            PostData body,
            CreateIndexRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"{index:index}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</para></summary>
        /// <param name="name">Name of the index template to delete. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse DeleteComposableTemplateForAll<TResponse>(
            string name,
            DeleteComposableIndexTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                DELETE,
                Url($"_index_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>DELETE on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/#delete-a-template</para></summary>
        /// <param name="name">Name of the index template to delete. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.delete_index_template", "name")]
        public Task<TResponse> DeleteComposableTemplateForAllAsync<TResponse>(
            string name,
            DeleteComposableIndexTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                DELETE,
                Url($"_index_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Name of the index template to check existence of. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse ComposableTemplateExistsForAll<TResponse>(
            string name,
            ComposableIndexTemplateExistsRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                HEAD,
                Url($"_index_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>HEAD on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Name of the index template to check existence of. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.exists_index_template", "name")]
        public Task<TResponse> ComposableTemplateExistsForAllAsync<TResponse>(
            string name,
            ComposableIndexTemplateExistsRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                HEAD,
                Url($"_index_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_index_template <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetComposableTemplateForAll<TResponse>(
            GetComposableIndexTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(GET, "_index_template", null, RequestParams(requestParameters));

        /// <summary>GET on /_index_template <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.get_index_template", "")]
        public Task<TResponse> GetComposableTemplateForAllAsync<TResponse>(
            GetComposableIndexTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                "_index_template",
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Name of the index template to retrieve. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse GetComposableTemplateForAll<TResponse>(
            string name,
            GetComposableIndexTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                GET,
                Url($"_index_template/{name:name}"),
                null,
                RequestParams(requestParameters)
            );

        /// <summary>GET on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Name of the index template to retrieve. Wildcard (*) expressions are supported.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.get_index_template", "name")]
        public Task<TResponse> GetComposableTemplateForAllAsync<TResponse>(
            string name,
            GetComposableIndexTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                GET,
                Url($"_index_template/{name:name}"),
                ctx,
                null,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Index or template name.</param>
        /// <param name="body">The template definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        public TResponse PutComposableTemplateForAll<TResponse>(
            string name,
            PostData body,
            PutComposableIndexTemplateRequestParameters requestParameters = null
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequest<TResponse>(
                PUT,
                Url($"_index_template/{name:name}"),
                body,
                RequestParams(requestParameters)
            );

        /// <summary>PUT on /_index_template/{name} <para>https://opensearch.org/docs/latest/im-plugin/index-templates/</para></summary>
        /// <param name="name">Index or template name.</param>
        /// <param name="body">The template definition.</param>
        /// <param name="requestParameters">Request specific configuration such as querystring parameters &amp; request specific connection settings.</param>
        [MapsApi("indices.put_index_template", "name, body")]
        public Task<TResponse> PutComposableTemplateForAllAsync<TResponse>(
            string name,
            PostData body,
            PutComposableIndexTemplateRequestParameters requestParameters = null,
            CancellationToken ctx = default
        )
            where TResponse : class, IOpenSearchResponse, new() =>
            DoRequestAsync<TResponse>(
                PUT,
                Url($"_index_template/{name:name}"),
                ctx,
                body,
                RequestParams(requestParameters)
            );
    }
}
