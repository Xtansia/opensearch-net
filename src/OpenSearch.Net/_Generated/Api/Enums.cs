/* SPDX-License-Identifier: Apache-2.0
*
* The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*/
/*
* Modifications Copyright OpenSearch Contributors. See
* GitHub history for details.
*
*  Licensed to Elasticsearch B.V. under one or more contributor
*  license agreements. See the NOTICE file distributed with
*  this work for additional information regarding copyright
*  ownership. Elasticsearch B.V. licenses this file to you under
*  the Apache License, Version 2.0 (the "License"); you may
*  not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing,
*  software distributed under the License is distributed on an
*  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
*  KIND, either express or implied.  See the License for the
*  specific language governing permissions and limitations
*  under the License.
*/
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// -----------------------------------------------
//
// This file is automatically generated
// Please do not edit these files manually
// Run the following in the root of the repos:
//
//      *NIX        :   ./build.sh codegen
//      Windows     :   build.bat codegen
//
// -----------------------------------------------
// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace OpenSearch.Net
{
    [StringEnum]
    public enum Bytes
    {
        [EnumMember(Value = "b")]
        B,

        [EnumMember(Value = "k")]
        K,

        [EnumMember(Value = "kb")]
        Kb,

        [EnumMember(Value = "m")]
        M,

        [EnumMember(Value = "mb")]
        Mb,

        [EnumMember(Value = "g")]
        G,

        [EnumMember(Value = "gb")]
        Gb,

        [EnumMember(Value = "t")]
        T,

        [EnumMember(Value = "tb")]
        Tb,

        [EnumMember(Value = "p")]
        P,

        [EnumMember(Value = "pb")]
        Pb
    }

    [StringEnum]
    public enum ClusterHealthLevel
    {
        [EnumMember(Value = "cluster")]
        Cluster,

        [EnumMember(Value = "indices")]
        Indices,

        [EnumMember(Value = "shards")]
        Shards,

        [EnumMember(Value = "awareness_attributes")]
        AwarenessAttributes
    }

    [Flags, StringEnum]
    public enum ClusterStateMetric
    {
        [EnumMember(Value = "blocks")]
        Blocks = 1 << 0,

        [EnumMember(Value = "metadata")]
        Metadata = 1 << 1,

        [EnumMember(Value = "nodes")]
        Nodes = 1 << 2,

        [EnumMember(Value = "routing_table")]
        RoutingTable = 1 << 3,

        [EnumMember(Value = "routing_nodes")]
        RoutingNodes = 1 << 4,

        [EnumMember(Value = "master_node")]
        MasterNode = 1 << 5,

        [EnumMember(Value = "cluster_manager_node")]
        ClusterManagerNode = 1 << 6,

        [EnumMember(Value = "version")]
        Version = 1 << 7,

        [EnumMember(Value = "_all")]
        All = 1 << 8
    }

    [Flags, StringEnum]
    public enum ExpandWildcards
    {
        [EnumMember(Value = "all")]
        All = 1 << 0,

        [EnumMember(Value = "open")]
        Open = 1 << 1,

        [EnumMember(Value = "closed")]
        Closed = 1 << 2,

        [EnumMember(Value = "hidden")]
        Hidden = 1 << 3,

        [EnumMember(Value = "none")]
        None = 1 << 4
    }

    [StringEnum]
    public enum HealthStatus
    {
        [EnumMember(Value = "green")]
        Green,

        [EnumMember(Value = "yellow")]
        Yellow,

        [EnumMember(Value = "red")]
        Red
    }

    [StringEnum]
    public enum Level
    {
        [EnumMember(Value = "cluster")]
        Cluster,

        [EnumMember(Value = "indices")]
        Indices,

        [EnumMember(Value = "shards")]
        Shards
    }

    [Flags, StringEnum]
    public enum NodesInfoMetric
    {
        [EnumMember(Value = "settings")]
        Settings = 1 << 0,

        [EnumMember(Value = "os")]
        Os = 1 << 1,

        [EnumMember(Value = "process")]
        Process = 1 << 2,

        [EnumMember(Value = "jvm")]
        Jvm = 1 << 3,

        [EnumMember(Value = "thread_pool")]
        ThreadPool = 1 << 4,

        [EnumMember(Value = "transport")]
        Transport = 1 << 5,

        [EnumMember(Value = "http")]
        Http = 1 << 6,

        [EnumMember(Value = "plugins")]
        Plugins = 1 << 7,

        [EnumMember(Value = "ingest")]
        Ingest = 1 << 8,

        [EnumMember(Value = "aggregations")]
        Aggregations = 1 << 9,

        [EnumMember(Value = "indices")]
        Indices = 1 << 10,

        [EnumMember(Value = "search_pipelines")]
        SearchPipelines = 1 << 11,

        [EnumMember(Value = "_all")]
        All = 1 << 12
    }

    [StringEnum]
    public enum NodesSampleType
    {
        [EnumMember(Value = "cpu")]
        Cpu,

        [EnumMember(Value = "wait")]
        Wait,

        [EnumMember(Value = "block")]
        Block
    }

    [Flags, StringEnum]
    public enum NodesStatsIndexMetric
    {
        [EnumMember(Value = "store")]
        Store = 1 << 0,

        [EnumMember(Value = "indexing")]
        Indexing = 1 << 1,

        [EnumMember(Value = "get")]
        Get = 1 << 2,

        [EnumMember(Value = "search")]
        Search = 1 << 3,

        [EnumMember(Value = "merge")]
        Merge = 1 << 4,

        [EnumMember(Value = "flush")]
        Flush = 1 << 5,

        [EnumMember(Value = "refresh")]
        Refresh = 1 << 6,

        [EnumMember(Value = "query_cache")]
        QueryCache = 1 << 7,

        [EnumMember(Value = "fielddata")]
        Fielddata = 1 << 8,

        [EnumMember(Value = "docs")]
        Docs = 1 << 9,

        [EnumMember(Value = "warmer")]
        Warmer = 1 << 10,

        [EnumMember(Value = "completion")]
        Completion = 1 << 11,

        [EnumMember(Value = "segments")]
        Segments = 1 << 12,

        [EnumMember(Value = "translog")]
        Translog = 1 << 13,

        [EnumMember(Value = "suggest")]
        Suggest = 1 << 14,

        [EnumMember(Value = "request_cache")]
        RequestCache = 1 << 15,

        [EnumMember(Value = "recovery")]
        Recovery = 1 << 16,

        [EnumMember(Value = "_all")]
        All = 1 << 17
    }

    [Flags, StringEnum]
    public enum NodesStatsMetric
    {
        [EnumMember(Value = "breaker")]
        Breaker = 1 << 0,

        [EnumMember(Value = "fs")]
        Fs = 1 << 1,

        [EnumMember(Value = "http")]
        Http = 1 << 2,

        [EnumMember(Value = "indices")]
        Indices = 1 << 3,

        [EnumMember(Value = "jvm")]
        Jvm = 1 << 4,

        [EnumMember(Value = "os")]
        Os = 1 << 5,

        [EnumMember(Value = "process")]
        Process = 1 << 6,

        [EnumMember(Value = "thread_pool")]
        ThreadPool = 1 << 7,

        [EnumMember(Value = "transport")]
        Transport = 1 << 8,

        [EnumMember(Value = "discovery")]
        Discovery = 1 << 9,

        [EnumMember(Value = "indexing_pressure")]
        IndexingPressure = 1 << 10,

        [EnumMember(Value = "search_pipeline")]
        SearchPipeline = 1 << 11,

        [EnumMember(Value = "_all")]
        All = 1 << 12
    }

    [Flags, StringEnum]
    public enum NodesUsageMetric
    {
        [EnumMember(Value = "rest_actions")]
        RestActions = 1 << 0,

        [EnumMember(Value = "_all")]
        All = 1 << 1
    }

    [StringEnum]
    public enum TasksGroupBy
    {
        [EnumMember(Value = "nodes")]
        Nodes,

        [EnumMember(Value = "parents")]
        Parents,

        [EnumMember(Value = "none")]
        None
    }

    [StringEnum]
    public enum TimeUnit
    {
        [EnumMember(Value = "nanos")]
        Nanos,

        [EnumMember(Value = "micros")]
        Micros,

        [EnumMember(Value = "ms")]
        Ms,

        [EnumMember(Value = "s")]
        S,

        [EnumMember(Value = "m")]
        M,

        [EnumMember(Value = "h")]
        H,

        [EnumMember(Value = "d")]
        D
    }

    [StringEnum]
    public enum WaitForActiveShardOptions
    {
        [EnumMember(Value = "all")]
        All,

        [EnumMember(Value = "index-setting")]
        IndexSetting
    }

    [StringEnum]
    public enum WaitForEvents
    {
        [EnumMember(Value = "immediate")]
        Immediate,

        [EnumMember(Value = "urgent")]
        Urgent,

        [EnumMember(Value = "high")]
        High,

        [EnumMember(Value = "normal")]
        Normal,

        [EnumMember(Value = "low")]
        Low,

        [EnumMember(Value = "languid")]
        Languid
    }

    public static partial class KnownEnums
    {
        static partial void RegisterEnumStringResolvers()
        {
            AddEnumStringResolver<Bytes>(GetStringValue);
            AddEnumStringResolver<ClusterHealthLevel>(GetStringValue);
            AddEnumStringResolver<ClusterStateMetric>(GetStringValue);
            AddEnumStringResolver<ExpandWildcards>(GetStringValue);
            AddEnumStringResolver<HealthStatus>(GetStringValue);
            AddEnumStringResolver<Level>(GetStringValue);
            AddEnumStringResolver<NodesInfoMetric>(GetStringValue);
            AddEnumStringResolver<NodesSampleType>(GetStringValue);
            AddEnumStringResolver<NodesStatsIndexMetric>(GetStringValue);
            AddEnumStringResolver<NodesStatsMetric>(GetStringValue);
            AddEnumStringResolver<NodesUsageMetric>(GetStringValue);
            AddEnumStringResolver<TasksGroupBy>(GetStringValue);
            AddEnumStringResolver<TimeUnit>(GetStringValue);
            AddEnumStringResolver<WaitForActiveShardOptions>(GetStringValue);
            AddEnumStringResolver<WaitForEvents>(GetStringValue);
        }

        public static string GetStringValue(this Bytes enumValue) =>
            enumValue switch
            {
                Bytes.B => "b",
                Bytes.K => "k",
                Bytes.Kb => "kb",
                Bytes.M => "m",
                Bytes.Mb => "mb",
                Bytes.G => "g",
                Bytes.Gb => "gb",
                Bytes.T => "t",
                Bytes.Tb => "tb",
                Bytes.P => "p",
                Bytes.Pb => "pb",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'Bytes'"
                    )
            };

        public static string GetStringValue(this ClusterHealthLevel enumValue) =>
            enumValue switch
            {
                ClusterHealthLevel.Cluster => "cluster",
                ClusterHealthLevel.Indices => "indices",
                ClusterHealthLevel.Shards => "shards",
                ClusterHealthLevel.AwarenessAttributes => "awareness_attributes",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'ClusterHealthLevel'"
                    )
            };

        public static string GetStringValue(this ClusterStateMetric enumValue)
        {
            if ((enumValue & ClusterStateMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & ClusterStateMetric.Blocks) != 0)
                list.Add("blocks");
            if ((enumValue & ClusterStateMetric.Metadata) != 0)
                list.Add("metadata");
            if ((enumValue & ClusterStateMetric.Nodes) != 0)
                list.Add("nodes");
            if ((enumValue & ClusterStateMetric.RoutingTable) != 0)
                list.Add("routing_table");
            if ((enumValue & ClusterStateMetric.RoutingNodes) != 0)
                list.Add("routing_nodes");
            if ((enumValue & ClusterStateMetric.MasterNode) != 0)
                list.Add("master_node");
            if ((enumValue & ClusterStateMetric.ClusterManagerNode) != 0)
                list.Add("cluster_manager_node");
            if ((enumValue & ClusterStateMetric.Version) != 0)
                list.Add("version");
            return string.Join(",", list);
        }

        public static string GetStringValue(this ExpandWildcards enumValue)
        {
            var list = new List<string>();
            if ((enumValue & ExpandWildcards.All) != 0)
                list.Add("all");
            if ((enumValue & ExpandWildcards.Open) != 0)
                list.Add("open");
            if ((enumValue & ExpandWildcards.Closed) != 0)
                list.Add("closed");
            if ((enumValue & ExpandWildcards.Hidden) != 0)
                list.Add("hidden");
            if ((enumValue & ExpandWildcards.None) != 0)
                list.Add("none");
            return string.Join(",", list);
        }

        public static string GetStringValue(this HealthStatus enumValue) =>
            enumValue switch
            {
                HealthStatus.Green => "green",
                HealthStatus.Yellow => "yellow",
                HealthStatus.Red => "red",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'HealthStatus'"
                    )
            };

        public static string GetStringValue(this Level enumValue) =>
            enumValue switch
            {
                Level.Cluster => "cluster",
                Level.Indices => "indices",
                Level.Shards => "shards",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'Level'"
                    )
            };

        public static string GetStringValue(this NodesInfoMetric enumValue)
        {
            if ((enumValue & NodesInfoMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesInfoMetric.Settings) != 0)
                list.Add("settings");
            if ((enumValue & NodesInfoMetric.Os) != 0)
                list.Add("os");
            if ((enumValue & NodesInfoMetric.Process) != 0)
                list.Add("process");
            if ((enumValue & NodesInfoMetric.Jvm) != 0)
                list.Add("jvm");
            if ((enumValue & NodesInfoMetric.ThreadPool) != 0)
                list.Add("thread_pool");
            if ((enumValue & NodesInfoMetric.Transport) != 0)
                list.Add("transport");
            if ((enumValue & NodesInfoMetric.Http) != 0)
                list.Add("http");
            if ((enumValue & NodesInfoMetric.Plugins) != 0)
                list.Add("plugins");
            if ((enumValue & NodesInfoMetric.Ingest) != 0)
                list.Add("ingest");
            if ((enumValue & NodesInfoMetric.Aggregations) != 0)
                list.Add("aggregations");
            if ((enumValue & NodesInfoMetric.Indices) != 0)
                list.Add("indices");
            if ((enumValue & NodesInfoMetric.SearchPipelines) != 0)
                list.Add("search_pipelines");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesSampleType enumValue) =>
            enumValue switch
            {
                NodesSampleType.Cpu => "cpu",
                NodesSampleType.Wait => "wait",
                NodesSampleType.Block => "block",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'NodesSampleType'"
                    )
            };

        public static string GetStringValue(this NodesStatsIndexMetric enumValue)
        {
            if ((enumValue & NodesStatsIndexMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesStatsIndexMetric.Store) != 0)
                list.Add("store");
            if ((enumValue & NodesStatsIndexMetric.Indexing) != 0)
                list.Add("indexing");
            if ((enumValue & NodesStatsIndexMetric.Get) != 0)
                list.Add("get");
            if ((enumValue & NodesStatsIndexMetric.Search) != 0)
                list.Add("search");
            if ((enumValue & NodesStatsIndexMetric.Merge) != 0)
                list.Add("merge");
            if ((enumValue & NodesStatsIndexMetric.Flush) != 0)
                list.Add("flush");
            if ((enumValue & NodesStatsIndexMetric.Refresh) != 0)
                list.Add("refresh");
            if ((enumValue & NodesStatsIndexMetric.QueryCache) != 0)
                list.Add("query_cache");
            if ((enumValue & NodesStatsIndexMetric.Fielddata) != 0)
                list.Add("fielddata");
            if ((enumValue & NodesStatsIndexMetric.Docs) != 0)
                list.Add("docs");
            if ((enumValue & NodesStatsIndexMetric.Warmer) != 0)
                list.Add("warmer");
            if ((enumValue & NodesStatsIndexMetric.Completion) != 0)
                list.Add("completion");
            if ((enumValue & NodesStatsIndexMetric.Segments) != 0)
                list.Add("segments");
            if ((enumValue & NodesStatsIndexMetric.Translog) != 0)
                list.Add("translog");
            if ((enumValue & NodesStatsIndexMetric.Suggest) != 0)
                list.Add("suggest");
            if ((enumValue & NodesStatsIndexMetric.RequestCache) != 0)
                list.Add("request_cache");
            if ((enumValue & NodesStatsIndexMetric.Recovery) != 0)
                list.Add("recovery");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesStatsMetric enumValue)
        {
            if ((enumValue & NodesStatsMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesStatsMetric.Breaker) != 0)
                list.Add("breaker");
            if ((enumValue & NodesStatsMetric.Fs) != 0)
                list.Add("fs");
            if ((enumValue & NodesStatsMetric.Http) != 0)
                list.Add("http");
            if ((enumValue & NodesStatsMetric.Indices) != 0)
                list.Add("indices");
            if ((enumValue & NodesStatsMetric.Jvm) != 0)
                list.Add("jvm");
            if ((enumValue & NodesStatsMetric.Os) != 0)
                list.Add("os");
            if ((enumValue & NodesStatsMetric.Process) != 0)
                list.Add("process");
            if ((enumValue & NodesStatsMetric.ThreadPool) != 0)
                list.Add("thread_pool");
            if ((enumValue & NodesStatsMetric.Transport) != 0)
                list.Add("transport");
            if ((enumValue & NodesStatsMetric.Discovery) != 0)
                list.Add("discovery");
            if ((enumValue & NodesStatsMetric.IndexingPressure) != 0)
                list.Add("indexing_pressure");
            if ((enumValue & NodesStatsMetric.SearchPipeline) != 0)
                list.Add("search_pipeline");
            return string.Join(",", list);
        }

        public static string GetStringValue(this NodesUsageMetric enumValue)
        {
            if ((enumValue & NodesUsageMetric.All) != 0)
                return "_all";
            var list = new List<string>();
            if ((enumValue & NodesUsageMetric.RestActions) != 0)
                list.Add("rest_actions");
            return string.Join(",", list);
        }

        public static string GetStringValue(this TasksGroupBy enumValue) =>
            enumValue switch
            {
                TasksGroupBy.Nodes => "nodes",
                TasksGroupBy.Parents => "parents",
                TasksGroupBy.None => "none",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'TasksGroupBy'"
                    )
            };

        public static string GetStringValue(this TimeUnit enumValue) =>
            enumValue switch
            {
                TimeUnit.Nanos => "nanos",
                TimeUnit.Micros => "micros",
                TimeUnit.Ms => "ms",
                TimeUnit.S => "s",
                TimeUnit.M => "m",
                TimeUnit.H => "h",
                TimeUnit.D => "d",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'TimeUnit'"
                    )
            };

        public static string GetStringValue(this WaitForActiveShardOptions enumValue) =>
            enumValue switch
            {
                WaitForActiveShardOptions.All => "all",
                WaitForActiveShardOptions.IndexSetting => "index-setting",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'WaitForActiveShardOptions'"
                    )
            };

        public static string GetStringValue(this WaitForEvents enumValue) =>
            enumValue switch
            {
                WaitForEvents.Immediate => "immediate",
                WaitForEvents.Urgent => "urgent",
                WaitForEvents.High => "high",
                WaitForEvents.Normal => "normal",
                WaitForEvents.Low => "low",
                WaitForEvents.Languid => "languid",
                _
                    => throw new ArgumentException(
                        $"'{enumValue.ToString()}' is not a valid value for enum 'WaitForEvents'"
                    )
            };
    }
}
